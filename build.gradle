plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtension
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'com.querydsl:querydsl-jpa'
    implementation "org.flywaydb:flyway-core:7.14.0"
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.5.RELEASE'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    testImplementation group: 'io.findify', name: 's3mock_2.13', version: '0.2.6'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.dbunit:dbunit:2.6.0'
    testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.3'
    annotationProcessor 'org.projectlombok:lombok'
    asciidoctorExtension 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

jacoco {
    toolVersion = "0.8.7"
}

asciidoctor {
    configurations 'asciidoctorExtension'
    inputs.dir snippetsDir
    outputDir file('build/docs/html5')
    dependsOn test
}

test {
    finalizedBy jacocoTestReport
    outputs.dir snippetsDir
    useJUnitPlatform()
}

jacocoTestReport {
    finalizedBy jacocoTestCoverageVerification

    reports {
        csv.required = false
        xml.required = true
        html.required = true
    }

    def qDomains = []
    for (qPattern in "**/QA".."**/QZ") {
        qDomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["com/project/kodesalon/config/*Config.*",
                              "com/project/kodesalon/exception/*"] + qDomains)
        }))
    }
}

jacocoTestCoverageVerification {
    def qDomains = []

    for (qPattern in "*.QA".."*.QZ") {
        qDomains.add(qPattern + "*")
    }

    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = ['com.project.kodesalon.KodesalonApplication',
                        'com.project.kodesalon.config.*Config',
                        'com.project.kodesalon.exception.*',
                        'com.project.kodesalon.controller.DeployController',
                        'com.project.kodesalon.service.FileService'] + qDomains
        }
    }
}

task copyHTMLDocument(type: Copy) {
    dependsOn asciidoctor
    from "${asciidoctor.outputDir}"
    into "src/main/resources/static/docs"
}

build {
    dependsOn copyHTMLDocument
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
